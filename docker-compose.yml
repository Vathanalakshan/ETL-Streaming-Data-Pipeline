# Copyright VMware, Inc.
# SPDX-License-Identifier: APACHE-2.0
version: '2'

networks:
  app-tier:
    driver: bridge

services:
  kafka:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app-tier
  init-kafka-container:
    image: docker.io/bitnami/kafka:3.5
    depends_on:
      kafka:
        condition: service_started
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      # create topics
      /opt/bitnami/kafka/bin/kafka-topics.sh --create --partitions 3 --bootstrap-server kafka:9092 --topic myTopic
      # show topics
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
    networks:
      - app-tier


  postgresql:
    image: docker.io/bitnami/postgresql:15
    volumes:
      - 'postgresql_data:/bitnami/postgresql'
    environment:
      - POSTGRESQL_DATABASE=bitnami_airflow
      - POSTGRESQL_USERNAME=bn_airflow
      - POSTGRESQL_PASSWORD=bitnami1
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - app-tier

  redis:
    image: docker.io/bitnami/redis:7.0
    volumes:
      - 'redis_data:/bitnami'
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - app-tier

  airflow-scheduler:
    image: docker.io/bitnami/airflow-scheduler:2
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=bitnami1
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_WEBSERVER_HOST=airflow
      - AIRFLOW_LOAD_EXAMPLES=false
    volumes:
      - .\Extract\dags:/opt/bitnami/airflow/dags
      - .\Extract\logs:/opt/bitnami/airflow/logs
      - .\Extract\plugins:/opt/bitnami/airflow/plugins
      - .\Extract\requirements.txt:/bitnami/python/requirements.txt
    networks:
      - app-tier
    depends_on:
      init-kafka-container:
        condition: service_completed_successfully


  airflow-worker:
    image: docker.io/bitnami/airflow-worker:2
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=bitnami1
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_WEBSERVER_HOST=airflow
      - AIRFLOW_LOAD_EXAMPLES=false
    volumes:
      - .\Extract\dags:/opt/bitnami/airflow/dags
      - .\Extract\logs:/opt/bitnami/airflow/logs
      - .\Extract\plugins:/opt/bitnami/airflow/plugins
      - .\Extract\requirements.txt:/bitnami/python/requirements.txt
    networks:
      - app-tier
    depends_on:
      init-kafka-container:
        condition: service_completed_successfully

  airflow:
    image: docker.io/bitnami/airflow:2
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=bitnami1
      - AIRFLOW_EXECUTOR=CeleryExecutor
    ports:
      - '8081:8080'
    networks:
      - app-tier
    depends_on:
      init-kafka-container:
        condition: service_completed_successfully

  spark:
    image: docker.io/bitnami/spark:3.4
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - '8080:8080'
    networks:
      - app-tier
    depends_on:
      init-kafka-container:
        condition: service_completed_successfully
    volumes:
      - .\Transform\conf\log4j2.properties:/opt/bitnami/spark/conf/log4j2.properties
      - .\Transform\spark-apps:/opt/spark-apps
      - .\Transform\requirements.txt:/bitnami/python/requirements.txt 
  spark-worker:
    image: docker.io/bitnami/spark:3.4
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - .\Transform\conf\log4j2.properties:/opt/bitnami/spark/conf/log4j2.properties
    depends_on:
      init-kafka-container:
        condition: service_completed_successfully
    networks:
      - app-tier

volumes:
  kafka_data:
    driver: local 
  postgresql_data:
    driver: local
  redis_data:
    driver: local

